'use client';

import React, { useState, useEffect } from 'react';
import { 
  FiWifi, FiCpu, FiUsers, FiShield, FiTrendingUp, 
  FiActivity, FiDollarSign, FiZap, FiCheck, FiClock,
  FiTarget, FiDatabase, FiGlobe, FiLayers
} from 'react-icons/fi';

interface TradingStep {
  id: string;
  title: string;
  description: string;
  details: string;
  icon: React.ComponentType;
  status: 'pending' | 'active' | 'completed';
  color: string;
  glowColor: string;
  duration: number;
  data?: any;
}

const RealisticTradingSimulation: React.FC = () => {
  const [currentStep, setCurrentStep] = useState(0);
  const [isAnimating, setIsAnimating] = useState(true);
  const [realTimeStats, setRealTimeStats] = useState({
    totalOperations: 248,
    successRate: 87.2,
    activeUsers: 12,
    totalProfit: 67850.45,
    currentPrice: 42350.00,
    currentSymbol: 'BTC/USDT',
    lastUpdate: new Date()
  });

  // FLUXO OPERACIONAL REAL DO COINBITCLUB - Baseado na documentação técnica
  const tradingWorkflow: TradingStep[] = [
    {
      id: 'tradingview-webhook',
      title: 'WEBHOOK TRADINGVIEW RECEBIDO',
      description: 'POST /api/webhooks/tradingview | STRONG_BUY BTC/USDT',
      details: 'Enhanced Signal Processor validando dados: RSI: 28.5 | MACD: Bullish Cross | Volume: +89%',
      icon: FiWifi,
      status: 'pending',
      color: '#FFD700',
      glowColor: 'rgba(255, 215, 0, 0.4)',
      duration: 1800,
      data: { signal: 'STRONG_BUY', symbol: 'BTCUSDT', confidence: 94.7 }
    },
    {
      id: 'ia-decision-engine',
      title: 'IA DECISION ENGINE ATIVADA',
      description: 'Analisando 4 condições obrigatórias do CoinBitClub',
      details: 'Tendência ✓ | Volume ✓ | RSI ✓ | Momentum ✓ | Confiança: 89.2%',
      icon: FiCpu,
      status: 'pending',
      color: '#00BFFF',
      glowColor: 'rgba(0, 191, 255, 0.4)',
      duration: 2800,
      data: { trend: true, volume: true, rsi: true, momentum: true }
    },
    {
      id: 'multiuser-processor',
      title: 'EXECUÇÃO MULTI-USUÁRIO INICIADA',
      description: '12 usuários ativos carregados do banco PostgreSQL',
      details: 'Order Execution Engine distribuindo: 8 contas Bybit + 4 contas Binance',
      icon: FiUsers,
      status: 'pending',
      color: '#FF69B4',
      glowColor: 'rgba(255, 105, 180, 0.4)',
      duration: 2200,
      data: { bybitUsers: 8, binanceUsers: 4, totalVolume: 24680 }
    },
    {
      id: 'position-safety-validation',
      title: 'POSITION SAFETY VALIDATOR',
      description: 'Validação obrigatória de Stop Loss e Take Profit',
      details: 'Stop Loss: $40,500 (-4.3%) | Take Profit: $44,200 (+4.2%) | Risk Score: 2.8%',
      icon: FiShield,
      status: 'pending',
      color: '#10B981',
      glowColor: 'rgba(16, 185, 129, 0.4)',
      duration: 1500,
      data: { stopLoss: 40500, takeProfit: 44200, riskScore: 2.8 }
    },
    {
      id: 'exchange-orchestrator',
      title: 'MULTI EXCHANGE ORCHESTRATOR',
      description: 'Roteamento inteligente para melhor liquidez',
      details: 'Bybit: $15,280 (8 ordens) | Binance: $9,400 (4 ordens) | Total: $24,680',
      icon: FiTrendingUp,
      status: 'pending',
      color: '#F59E0B',
      glowColor: 'rgba(245, 158, 11, 0.4)',
      duration: 3200,
      data: { bybitVolume: 15280, binanceVolume: 9400, totalOrders: 12 }
    },
    {
      id: 'realtime-position-monitor',
      title: 'POSITION MONITOR ATIVO',
      description: 'Monitoramento em tempo real das 12 posições abertas',
      details: 'P&L Total: +$1,847.20 | Melhor: +4.1% | Pior: +2.8% | Win Rate: 100%',
      icon: FiActivity,
      status: 'pending',
      color: '#8B5CF6',
      glowColor: 'rgba(139, 92, 246, 0.4)',
      duration: 4500,
      data: { totalPnL: 1847.20, bestTrade: 4.1, worstTrade: 2.8 }
    },
    {
      id: 'profit-distribution',
      title: 'SISTEMA DE COMISSIONAMENTO',
      description: 'Calculando comissões sobre lucros realizados',
      details: 'Lucro: $1,847.20 | Comissão 10%: $184.72 | Afiliados: $27.71 | Líquido: $1,634.77',
      icon: FiDollarSign,
      status: 'pending',
      color: '#059669',
      glowColor: 'rgba(5, 150, 105, 0.4)',
      duration: 2000,
      data: { profit: 1847.20, commission: 184.72, affiliate: 27.71, net: 1634.77 }
    }
  ];

  const [stepStates, setStepStates] = useState(
    tradingWorkflow.map(() => ({ status: 'pending' as const }))
  );

  // Simulação realista do processo
  useEffect(() => {
    if (!isAnimating) return;

    const runSimulation = async () => {
      for (let i = 0; i < tradingWorkflow.length; i++) {
        setCurrentStep(i);
        
        // Ativar step atual
        setStepStates(prev => prev.map((state, index) => ({
          ...state,
          status: index === i ? 'active' : index < i ? 'completed' : 'pending'
        })));

        // Atualizar stats em tempo real
        setRealTimeStats(prev => ({
          ...prev,
          totalOperations: prev.totalOperations + Math.floor(Math.random() * 3),
          currentPrice: prev.currentPrice + (Math.random() - 0.5) * 100,
          lastUpdate: new Date()
        }));

        // Aguardar duração do step
        await new Promise(resolve => setTimeout(resolve, tradingWorkflow[i].duration));

        // Completar step
        setStepStates(prev => prev.map((state, index) => ({
          ...state,
          status: index <= i ? 'completed' : 'pending'
        })));
      }

      // Reiniciar após completar
      setTimeout(() => {
        setCurrentStep(0);
        setStepStates(tradingWorkflow.map(() => ({ status: 'pending' as const })));
      }, 3000);
    };

    runSimulation();
  }, [isAnimating, tradingWorkflow.length]);

  // Atualizar dados em tempo real
  useEffect(() => {
    const interval = setInterval(() => {
      setRealTimeStats(prev => ({
        ...prev,
        currentPrice: prev.currentPrice + (Math.random() - 0.5) * 50,
        successRate: Math.max(85, Math.min(95, prev.successRate + (Math.random() - 0.5) * 2)),
        totalProfit: prev.totalProfit + Math.random() * 100,
        lastUpdate: new Date()
      }));
    }, 2000);

    return () => clearInterval(interval);
  }, []);

  const getStepIcon = (step: TradingStep, index: number) => {
    const IconComponent = step.icon;
    const state = stepStates[index];
    
    return (
      <div 
        className={`
          relative w-16 h-16 rounded-full flex items-center justify-center border-2 transition-all duration-500
          ${state.status === 'active' ? 'border-neon-gold bg-neon-gold/10 animate-pulse' : ''}
          ${state.status === 'completed' ? 'border-success bg-success/10' : ''}
          ${state.status === 'pending' ? 'border-surface-300 bg-surface-100' : ''}
        `}
        style={{
          boxShadow: state.status === 'active' ? `0 0 20px ${step.glowColor}` : 'none'
        }}
      >
        <IconComponent 
          className={`
            w-8 h-8 transition-colors duration-300
            ${state.status === 'active' ? 'text-neon-gold' : ''}
            ${state.status === 'completed' ? 'text-success' : ''}
            ${state.status === 'pending' ? 'text-text-muted' : ''}
          `}
        />
        
        {state.status === 'active' && (
          <div className="absolute inset-0 rounded-full border-2 border-neon-gold animate-ping opacity-75" />
        )}
      </div>
    );
  };

  return (
    <div className="w-full max-w-6xl mx-auto p-6 bg-gradient-to-br from-surface-50 to-surface-100 rounded-xl">
      {/* Header com Stats em Tempo Real */}
      <div className="mb-8 text-center">
        <div className="inline-flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-neon-gold to-neon-blue rounded-full text-white font-bold text-sm animate-pulse mb-4">
          <FiZap className="w-4 h-4" />
          SISTEMA 100% OPERACIONAL - {realTimeStats.activeUsers} USUÁRIOS ATIVOS
        </div>
        
        <h2 className="text-3xl font-bold text-text-primary mb-2">
          Simulação em Tempo Real - CoinBitClub MarketBot
        </h2>
        <p className="text-text-muted">
          Acompanhe o fluxo operacional completo baseado na nossa arquitetura enterprise real
        </p>
        
        {/* Stats em tempo real */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-6">
          <div className="bg-white/50 backdrop-blur rounded-lg p-4">
            <div className="text-2xl font-bold text-neon-gold">{realTimeStats.totalOperations}</div>
            <div className="text-sm text-text-muted">Total de Operações</div>
          </div>
          <div className="bg-white/50 backdrop-blur rounded-lg p-4">
            <div className="text-2xl font-bold text-success">{realTimeStats.successRate.toFixed(1)}%</div>
            <div className="text-sm text-text-muted">Taxa de Sucesso</div>
          </div>
          <div className="bg-white/50 backdrop-blur rounded-lg p-4">
            <div className="text-2xl font-bold text-neon-blue">${realTimeStats.totalProfit.toFixed(0)}</div>
            <div className="text-sm text-text-muted">Lucro Total</div>
          </div>
          <div className="bg-white/50 backdrop-blur rounded-lg p-4">
            <div className="text-2xl font-bold text-neon-pink real-time-value">
              ${realTimeStats.currentPrice.toFixed(0)}
            </div>
            <div className="text-sm text-text-muted">{realTimeStats.currentSymbol}</div>
          </div>
        </div>
      </div>

      {/* Timeline do Fluxo Operacional */}
      <div className="space-y-6">
        {tradingWorkflow.map((step, index) => {
          const state = stepStates[index];
          const isActive = currentStep === index;
          
          return (
            <div
              key={step.id}
              className={`
                relative flex items-start gap-6 p-6 rounded-xl transition-all duration-500 border
                ${state.status === 'active' ? 'bg-gradient-to-r from-neon-gold/5 to-neon-blue/5 border-neon-gold/30' : ''}
                ${state.status === 'completed' ? 'bg-success/5 border-success/30' : ''}
                ${state.status === 'pending' ? 'bg-white/30 border-surface-200' : ''}
              `}
            >
              {/* Icon */}
              <div className="flex-shrink-0">
                {getStepIcon(step, index)}
              </div>

              {/* Content */}
              <div className="flex-1 min-w-0">
                <div className="flex items-center gap-3 mb-2">
                  <h3 className={`
                    text-lg font-bold transition-colors duration-300
                    ${state.status === 'active' ? 'text-neon-gold' : ''}
                    ${state.status === 'completed' ? 'text-success' : ''}
                    ${state.status === 'pending' ? 'text-text-muted' : ''}
                  `}>
                    {step.title}
                  </h3>
                  
                  {state.status === 'active' && (
                    <div className="flex items-center gap-1 text-neon-gold text-sm font-medium">
                      <FiClock className="w-4 h-4" />
                      PROCESSANDO...
                    </div>
                  )}
                  
                  {state.status === 'completed' && (
                    <div className="flex items-center gap-1 text-success text-sm font-medium">
                      <FiCheck className="w-4 h-4" />
                      CONCLUÍDO
                    </div>
                  )}
                </div>

                <p className={`
                  text-base mb-2 transition-colors duration-300
                  ${state.status === 'active' ? 'text-text-primary' : ''}
                  ${state.status === 'completed' ? 'text-text-primary' : ''}
                  ${state.status === 'pending' ? 'text-text-muted' : ''}
                `}>
                  {step.description}
                </p>

                <p className={`
                  text-sm transition-colors duration-300
                  ${state.status === 'active' ? 'text-neon-blue' : ''}
                  ${state.status === 'completed' ? 'text-success' : ''}
                  ${state.status === 'pending' ? 'text-text-muted' : ''}
                `}>
                  {step.details}
                </p>

                {/* Data específica do step */}
                {step.data && state.status !== 'pending' && (
                  <div className="mt-3 p-3 bg-black/5 rounded-lg text-xs font-mono">
                    <pre className="text-text-muted">
                      {JSON.stringify(step.data, null, 2)}
                    </pre>
                  </div>
                )}
              </div>

              {/* Progress bar para step ativo */}
              {state.status === 'active' && (
                <div className="absolute bottom-0 left-0 right-0 h-1 bg-surface-200 rounded-b-xl overflow-hidden">
                  <div 
                    className="h-full bg-gradient-to-r from-neon-gold to-neon-blue progress-animated"
                    style={{
                      animation: `progressFill ${step.duration}ms linear forwards`
                    }}
                  />
                </div>
              )}
            </div>
          );
        })}
      </div>

      {/* Footer com controles */}
      <div className="mt-8 flex justify-center gap-4">
        <button
          onClick={() => setIsAnimating(!isAnimating)}
          className={`
            px-6 py-3 rounded-lg font-medium transition-all duration-300
            ${isAnimating 
              ? 'bg-error text-white hover:bg-error/80' 
              : 'bg-success text-white hover:bg-success/80'
            }
          `}
        >
          {isAnimating ? 'Pausar Simulação' : 'Iniciar Simulação'}
        </button>
        
        <button
          onClick={() => {
            setCurrentStep(0);
            setStepStates(tradingWorkflow.map(() => ({ status: 'pending' as const })));
          }}
          className="px-6 py-3 bg-neon-blue text-white rounded-lg font-medium hover:bg-neon-blue/80 transition-all duration-300"
        >
          Reiniciar
        </button>
      </div>

      {/* CSS Animation Keyframes */}
      <style jsx>{`
        @keyframes progressFill {
          0% { width: 0%; }
          100% { width: 100%; }
        }
      `}</style>
    </div>
  );
};

export default RealisticTradingSimulation;
