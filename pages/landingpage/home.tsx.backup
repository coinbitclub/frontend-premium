import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import { motion, AnimatePresence } from 'framer-motion';
import RobotDemoLanding from '../../components/RobotDemoLanding';

type Language = 'pt' | 'en';

export default function HomePage() {
  const router = useRouter();
  const [mounted, setMounted] = useState(false);
  const [currentLanguage, setCurrentLanguage] = useState<Language>('pt');
  const [showFAQ, setShowFAQ] = useState(false);
  const [openFAQ, setOpenFAQ] = useState<number | null>(null);
  const [showVideoModal, setShowVideoModal] = useState(false);
  const [showHowItWorksModal, setShowHowItWorksModal] = useState(false);
  const [showMobileMenu, setShowMobileMenu] = useState(false);

  const [operationStats, setOperationStats] = useState({
    totalTrades: 8473,
    successRate: 94.7,
    totalProfit: 2847950.50,
    activeUsers: 15247
  });

  useEffect(() => {
    setMounted(true);
    
    // Carregar idioma do localStorage
    try {
      const savedLanguage = localStorage.getItem('coinbitclub-language') as Language;
      if (savedLanguage && (savedLanguage === 'pt' || savedLanguage === 'en')) {
        setCurrentLanguage(savedLanguage);
      }
    } catch (error) {
      console.warn('Error loading language:', error);
    }

    // Atualizar estatísticas a cada 30 segundos
    const interval = setInterval(() => {
      setOperationStats(prev => ({
        totalTrades: prev.totalTrades + Math.floor(Math.random() * 3) + 1,
        successRate: parseFloat((Math.random() * 2 + 93).toFixed(1)),
        totalProfit: prev.totalProfit + Math.random() * 5000 + 1000,
        activeUsers: prev.activeUsers + Math.floor(Math.random() * 10) - 5
      }));
    }, 30000);

    return () => clearInterval(interval);
  }, []);

  const handleLanguageChange = (lang: Language) => {
    console.log('🔄 Mudando idioma para:', lang);
    setCurrentLanguage(lang);
    try {
      localStorage.setItem('coinbitclub-language', lang);
      console.log('✅ Idioma salvo:', lang);
    } catch (error) {
      console.error('❌ Erro ao salvar idioma:', error);
    }
  };

  // Textos por idioma
  const texts = {
    pt: {
      title: 'MARKETBOT',
      subtitle: 'o robô que transforma sinais em',
      highlight: 'lucro real em DÓLAR',
      description: 'A IA de trade automatizado que só lucra se você lucrar! Conecte sua conta Binance ou Bybit e comece a lucrar em poucos cliques.',
      freeTrialBtn: '🚀 Teste Grátis 7 Dias',
      watchDemoBtn: '🎥 Como Funciona',
      stats: {
        trades: 'Operações',
        successRate: 'Taxa de Sucesso',
        totalProfit: 'Lucro Total',
        activeUsers: 'Usuários Ativos'
      },
      demo: {
        title: 'Veja o Robô em Ação',
        subtitle: 'Timeline em tempo real de como nossa IA opera no mercado 24/7'
      },
      howItWorks: {
        title: 'Como Funciona o MARKETBOT',
        subtitle: 'Entenda em 2 minutos como transformamos sinais em lucros reais'
      },
      affiliate: {
        title: 'Programa de Afiliados',
        subtitle: 'Ganhe 1,5% de comissão sobre os lucros dos seus indicados',
        description: 'Indique amigos e ganhe uma porcentagem dos lucros deles. Quanto mais pessoas você indicar, mais você ganha!',
        commission: '1,5% de comissão',
        realtime: 'Pagamentos em tempo real',
        dashboard: 'Dashboard exclusivo',
        cta: 'Tornar-se Afiliado'
      },
      faq: {
        title: 'Perguntas Frequentes',
        questions: [
          {
            q: "Como funciona o período de teste grátis?",
            a: "Você tem 7 dias para testar todas as funcionalidades do robô em modo TESTNET, sem risco ao seu capital."
          },
          {
            q: "O robô realmente só lucra se eu lucrar?",
            a: "Sim! Cobramos apenas comissão sobre os lucros reais. Se não há lucro, não há cobrança."
          },
          {
            q: "Qual o valor mínimo para começar?",
            a: "O valor mínimo varia conforme o plano escolhido, começando a partir de $100 USD para o plano básico."
          },
          {
            q: "Como funciona o sistema de afiliados?",
            a: "Você ganha 1,5% de comissão sobre os lucros reais dos usuários que você indicar. Quanto mais indicações ativas, maior sua renda passiva."
          },
          {
            q: "É seguro deixar o robô operando sozinho?",
            a: "Sim! Nosso sistema possui múltiplas camadas de segurança, stop-loss automático e opera apenas com capital que você define como limite."
          }
        ]
      },
      footer: {
        description: 'MARKETBOT: o robô de trade automático que só lucra se você lucrar. Tecnologia de ponta para maximizar seus resultados no mercado de criptomoedas.',
        contact: 'Contato',
        hours: 'Horário',
        support: 'Suporte 24/7',
        rights: 'Todos os direitos reservados.',
        secure: 'SSL Seguro',
        protected: 'Dados Protegidos',
        audited: 'Auditado'
      }
    },
    en: {
      title: 'MARKETBOT',
      subtitle: 'the robot that transforms signals into',
      highlight: 'real profit in DOLLARS',
      description: 'The automated trading AI that only profits if you profit! Connect your Binance or Bybit account and start profiting in just a few clicks.',
      freeTrialBtn: '🚀 Free 7-Day Trial',
      watchDemoBtn: '🎥 How It Works',
      stats: {
        trades: 'Trades',
        successRate: 'Success Rate',
        totalProfit: 'Total Profit',
        activeUsers: 'Active Users'
      },
      demo: {
        title: 'See the Robot in Action',
        subtitle: 'Real-time timeline of how our AI operates in the market 24/7'
      },
      howItWorks: {
        title: 'How MARKETBOT Works',
        subtitle: 'Understand in 2 minutes how we transform signals into real profits'
      },
      affiliate: {
        title: 'Affiliate Program',
        subtitle: 'Earn 1.5% commission on your referrals\' profits',
        description: 'Refer friends and earn a percentage of their profits. The more people you refer, the more you earn!',
        commission: '1.5% commission',
        realtime: 'Real-time payments',
        dashboard: 'Exclusive dashboard',
        cta: 'Become an Affiliate'
      },
      faq: {
        title: 'Frequently Asked Questions',
        questions: [
          {
            q: "How does the free trial period work?",
            a: "You have 7 days to test all robot features in TESTNET mode, with no risk to your capital."
          },
          {
            q: "Does the robot really only profit if I profit?",
            a: "Yes! We only charge commission on real profits. If there's no profit, there's no charge."
          },
          {
            q: "What's the minimum amount to start?",
            a: "The minimum amount varies by chosen plan, starting from $100 USD for the basic plan."
          },
          {
            q: "How does the affiliate system work?",
            a: "You earn 1.5% commission on the real profits of users you refer. The more active referrals, the higher your passive income."
          },
          {
            q: "Is it safe to let the robot operate alone?",
            a: "Yes! Our system has multiple security layers, automatic stop-loss, and only operates with capital you define as limit."
          }
        ]
      },
      footer: {
        description: 'MARKETBOT: the automated trading robot that transforms crypto signals into real dollars. Cutting-edge technology to maximize your results in the cryptocurrency market.',
        contact: 'Contact',
        hours: 'Hours',
        support: '24/7 Support',
        rights: 'All rights reserved.',
        secure: 'SSL Secure',
        protected: 'Data Protected',
        audited: 'Audited'
      }
    }
  };

  const t = texts[currentLanguage];

  // Componente de demonstração do robô - ALINHADO COM USER/OPERATIONS
  const RobotDemo = () => {
    const [currentPhase, setCurrentPhase] = useState(0);
    const [isProcessing, setIsProcessing] = useState(false);
    
    // Estados simulando o fluxo real como em user/operations
    const [marketIndicators, setMarketIndicators] = useState({
      fearAndGreed: 42,
      fearAndGreedStatus: 'FEAR',
      btcDominance: 56.8,
      longShortRatio: { long: 62.3, short: 37.7 }
    });
    
    const [signals, setSignals] = useState<any[]>([]);
    const [positions, setPositions] = useState<any[]>([]);
    const [dailyStats, setDailyStats] = useState({
      operationsToday: 8,
      successRate: 87.5,
      todayReturnUSD: 247.80,
      todayReturnPercent: 2.48
    });
    
    const [currentPrice, setCurrentPrice] = useState(67589.20);
    const [totalProfit, setTotalProfit] = useState(847.50);
    const [completedOperations, setCompletedOperations] = useState<any[]>([]);

    // Fluxo REAL do investidor - 6 etapas principais
    const tradingPhases = [
      {
        id: 'market_reading',
        step: 1,
        title: currentLanguage === 'pt' ? '� Leitura do Mercado' : '� Market Reading',
        description: currentLanguage === 'pt' 
          ? 'Analisando Fear & Greed (42), Dominância BTC (56.8%), Long/Short (62.3%/37.7%)'
          : 'Analyzing Fear & Greed (42), BTC Dominance (56.8%), Long/Short (62.3%/37.7%)',
        duration: 4000,
        color: 'indigo',
        icon: '📊'
      },
      {
        id: 'ai_decision',
        step: 2,
        title: currentLanguage === 'pt' ? '🤖 Decisão da IA' : '🤖 AI Decision',
        description: currentLanguage === 'pt' 
          ? 'DIREÇÃO: LONG | CONFIANÇA: 78.5% | Fear extremo + dominância estável = oportunidade'
          : 'DIRECTION: LONG | CONFIDENCE: 78.5% | Extreme fear + stable dominance = opportunity',
        duration: 3000,
        color: 'violet',
        icon: '🤖'
      },
      {
        id: 'signal_generation',
        step: 3,
        title: currentLanguage === 'pt' ? '⚡ Geração de Sinais' : '⚡ Signal Generation',
        description: currentLanguage === 'pt' 
          ? 'BTC/USDT LONG - Força: 85 - Status: APROVADO - Executando ordem...'
          : 'BTC/USDT LONG - Strength: 85 - Status: APPROVED - Executing order...',
        duration: 2500,
        color: 'amber',
        icon: '⚡'
      },
      {
        id: 'position_opening',
        step: 4,
        title: currentLanguage === 'pt' ? '� Abertura de Posição' : '� Position Opening',
        description: currentLanguage === 'pt' 
          ? 'Posição BTC/USDT LONG aberta - Entrada: $67,432 - Stop: $66,800 - Take: $68,500'
          : 'BTC/USDT LONG position opened - Entry: $67,432 - Stop: $66,800 - Take: $68,500',
        duration: 3500,
        color: 'green',
        icon: '📈'
      },
      {
        id: 'monitoring',
        step: 5,
        title: currentLanguage === 'pt' ? '�️ Monitoramento' : '�️ Monitoring',
        description: currentLanguage === 'pt' 
          ? 'Preço atual: $67,589 | P&L: +$156.70 (+0.23%) | Posição em lucro!'
          : 'Current price: $67,589 | P&L: +$156.70 (+0.23%) | Position in profit!',
        duration: 4000,
        color: 'cyan',
        icon: '👁️'
      },
      {
        id: 'profit_commission',
        step: 6,
        title: currentLanguage === 'pt' ? '� Lucro & Comissão' : '� Profit & Commission',
        description: currentLanguage === 'pt' 
          ? 'Take Profit atingido! Lucro: $156.70 | Comissão (30%): $47.01 | SEU LUCRO: $109.69'
          : 'Take Profit hit! Profit: $156.70 | Commission (30%): $47.01 | YOUR PROFIT: $109.69',
        duration: 3500,
        color: 'emerald',
        icon: '💰'
      }
    ];
    
    // Controle das fases - ciclo completo do investidor
    useEffect(() => {
      const interval = setInterval(() => {
        setIsProcessing(true);
        setTimeout(() => {
          setCurrentPhase(prev => (prev + 1) % tradingPhases.length);
          
          // Simular adição de sinal quando na fase de geração
          if (tradingPhases[currentPhase]?.id === 'signal_generation') {
            addNewSignal();
          }
          
          // Simular abertura de posição
          if (tradingPhases[currentPhase]?.id === 'position_opening') {
            addNewPosition();
          }
          
          // Atualizar estatísticas quando completar ciclo
          if (tradingPhases[currentPhase]?.id === 'profit_commission') {
            updateDailyStats();
          }
          
          setIsProcessing(false);
        }, 800); // Animação de processamento
      }, 4000); // Muda fase a cada 4 segundos
      
      return () => clearInterval(interval);
    }, [currentPhase, tradingPhases.length]);

    // Atualizar indicadores de mercado periodicamente
    useEffect(() => {
      const interval = setInterval(() => {
        setMarketIndicators(prev => ({
          fearAndGreed: Math.max(20, Math.min(80, prev.fearAndGreed + (Math.random() - 0.5) * 4)),
          fearAndGreedStatus: prev.fearAndGreed <= 25 ? 'EXTREME_FEAR' : 
                            prev.fearAndGreed <= 45 ? 'FEAR' : 
                            prev.fearAndGreed <= 55 ? 'NEUTRAL' : 
                            prev.fearAndGreed <= 75 ? 'GREED' : 'EXTREME_GREED',
          btcDominance: Math.max(50, Math.min(70, prev.btcDominance + (Math.random() - 0.5) * 0.8)),
          longShortRatio: {
            long: Math.max(40, Math.min(75, prev.longShortRatio.long + (Math.random() - 0.5) * 3)),
            short: Math.max(25, Math.min(60, prev.longShortRatio.short + (Math.random() - 0.5) * 3))
          }
        }));
      }, 8000);
      
      return () => clearInterval(interval);
    }, []);

    const addNewSignal = () => {
      const pairs = ['BTC/USDT', 'ETH/USDT', 'SOL/USDT', 'ADA/USDT'];
      const statuses = ['PROCESSANDO', 'APROVADO', 'EXECUTADO', 'DESCARTADO'];
      
      const newSignal = {
        id: Date.now().toString(),
        pair: pairs[Math.floor(Math.random() * pairs.length)],
        direction: Math.random() > 0.6 ? 'LONG' : 'SHORT',
        strength: Math.floor(Math.random() * 30 + 70), // 70-100
        confidence: Math.random() * 25 + 65, // 65-90%
        status: statuses[Math.floor(Math.random() * statuses.length)],
        timestamp: new Date()
      };
      
      setSignals(prev => [newSignal, ...prev.slice(0, 4)]); // Manter apenas 5 sinais
    };

    const addNewPosition = () => {
      const entryPrice = 67432 + (Math.random() - 0.5) * 1000;
      const currentPrice = entryPrice + (Math.random() - 0.3) * 300; // Tendência levemente positiva
      
      const newPosition = {
        id: Date.now().toString(),
        pair: 'BTC/USDT',
        type: 'LONG',
        entryPrice,
        currentPrice,
        quantity: 0.0148,
        pnl: (currentPrice - entryPrice) * 0.0148,
        pnlPercent: ((currentPrice - entryPrice) / entryPrice) * 100,
        status: 'OPEN',
        timestamp: new Date()
      };
      
      setPositions(prev => [newPosition, ...prev.slice(0, 2)]); // Manter apenas 3 posições
    };

    const updateDailyStats = () => {
      setDailyStats(prev => ({
        operationsToday: prev.operationsToday + 1,
        successRate: Math.max(80, Math.min(95, prev.successRate + (Math.random() - 0.3) * 2)),
        todayReturnUSD: prev.todayReturnUSD + Math.random() * 80 + 40, // +$40-120
        todayReturnPercent: prev.todayReturnPercent + (Math.random() * 0.8 + 0.2) // +0.2-1.0%
      }));
    };

    const getFearGreedColor = (value) => {
      if (value <= 25) return 'text-red-400';
      if (value <= 45) return 'text-orange-400';
      if (value <= 55) return 'text-yellow-400';
      if (value <= 75) return 'text-green-400';
      return 'text-emerald-400';
    };

    const formatPrice = (price) => `$${price.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
    const formatPercent = (percent) => `${percent >= 0 ? '+' : ''}${percent.toFixed(2)}%`;

    return (
      <div className="bg-gradient-to-br from-slate-800/80 to-slate-900/80 backdrop-blur-md rounded-2xl p-6 md:p-8 border border-yellow-500/20 shadow-2xl">
        {/* Header - Painel de Controle Realista */}
        <div className="bg-slate-800/80 rounded-xl p-4 mb-6 border border-slate-700/50">
          <div className="flex flex-col md:flex-row justify-between items-center gap-4">
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2">
                <div className={`w-3 h-3 rounded-full ${isProcessing ? 'bg-yellow-400 animate-pulse' : 'bg-green-400'}`}></div>
                <span className="text-green-400 font-semibold">
                  {currentLanguage === 'pt' ? 'SISTEMA ATIVO' : 'SYSTEM ACTIVE'}
                </span>
              </div>
              <div className="text-slate-400 text-sm">
                {currentLanguage === 'pt' ? 'Operando 24/7' : 'Trading 24/7'}
              </div>
            </div>
            
            <div className="flex items-center space-x-6 text-sm">
              <div className="text-center">
                <div className="text-blue-400 font-bold">BTC/USDT</div>
                <div className="text-white">${currentPrice.toFixed(2)}</div>
              </div>
              <div className="text-center">
                <div className="text-yellow-400 font-bold">
                  {currentLanguage === 'pt' ? 'Lucro Total' : 'Total Profit'}
                </div>
                <div className="text-green-400 font-bold">+${totalProfit.toFixed(2)}</div>
              </div>
              <div className="text-center">
                <div className="text-purple-400 font-bold">
                  {currentLanguage === 'pt' ? 'Operações' : 'Operations'}
                </div>
                <div className="text-white">{dailyStats.operationsToday}</div>
              </div>
            </div>
          </div>
        </div>

        {/* FLUXO PRINCIPAL - Matching user/operations.tsx */}
        <div className="space-y-6">
          {/* Fase Atual do Fluxo */}
          <div className={`bg-gradient-to-br from-${tradingPhases[currentPhase]?.color}-900/40 to-${tradingPhases[currentPhase]?.color}-800/30 backdrop-blur-sm rounded-xl border border-${tradingPhases[currentPhase]?.color}-500/30 p-6 relative overflow-hidden`}>
            {isProcessing && (
              <div className="absolute inset-0 bg-gradient-to-r from-yellow-500/10 via-orange-500/20 to-yellow-500/10 animate-pulse"></div>
            )}
            
            <div className="flex items-center gap-3 mb-4 relative z-10">
              <motion.div 
                animate={{ 
                  scale: isProcessing ? [1, 1.1, 1] : 1,
                  rotate: isProcessing ? [0, 10, -10, 0] : 0
                }}
                transition={{ 
                  duration: 1, 
                  repeat: isProcessing ? Infinity : 0,
                  ease: "easeInOut"
                }}
                className={`w-12 h-12 bg-${tradingPhases[currentPhase]?.color}-500/20 rounded-xl flex items-center justify-center text-2xl`}
              >
                {tradingPhases[currentPhase]?.icon}
              </motion.div>
              
              <div className="flex-1">
                <motion.h3
                  key={`phase-${currentPhase}`}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  className={`text-xl font-bold text-${tradingPhases[currentPhase]?.color}-400 mb-1`}
                >
                  {tradingPhases[currentPhase]?.title}
                </motion.h3>
                <motion.p
                  key={`desc-${currentPhase}`}
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ delay: 0.2 }}
                  className="text-slate-300 text-sm leading-relaxed"
                >
                  {tradingPhases[currentPhase]?.description}
                </motion.p>
              </div>
              
              {isProcessing && (
                <div className="text-yellow-400 text-sm font-medium">
                  {currentLanguage === 'pt' ? 'Processando...' : 'Processing...'}
                </div>
              )}
            </div>

            {/* Barra de Progresso do Ciclo */}
            <div className="w-full bg-slate-700 rounded-full h-2 mb-4 relative z-10">
              <motion.div
                key={currentPhase}
                initial={{ width: 0 }}
                animate={{ width: '100%' }}
                transition={{ duration: 3.2 }}
                className={`bg-gradient-to-r from-${tradingPhases[currentPhase]?.color}-400 to-${tradingPhases[currentPhase]?.color}-500 h-2 rounded-full`}
              ></motion.div>
            </div>

            {/* Indicadores Específicos por Fase */}
            {tradingPhases[currentPhase]?.id === 'market_reading' && (
              <div className="grid grid-cols-3 gap-4 mt-4 relative z-10">
                <div className="bg-black/20 rounded-lg p-3 text-center">
                  <div className="text-xs text-gray-400 mb-1">Fear & Greed</div>
                  <div className={`text-lg font-bold ${getFearGreedColor(marketIndicators.fearAndGreed)}`}>
                    {marketIndicators.fearAndGreed.toFixed(0)}
                  </div>
                </div>
                <div className="bg-black/20 rounded-lg p-3 text-center">
                  <div className="text-xs text-gray-400 mb-1">BTC Dom</div>
                  <div className="text-lg font-bold text-orange-400">
                    {marketIndicators.btcDominance.toFixed(1)}%
                  </div>
                </div>
                <div className="bg-black/20 rounded-lg p-3 text-center">
                  <div className="text-xs text-gray-400 mb-1">Long/Short</div>
                  <div className="text-lg font-bold text-green-400">
                    {marketIndicators.longShortRatio.long.toFixed(0)}%/{marketIndicators.longShortRatio.short.toFixed(0)}%
                  </div>
                </div>
              </div>
            )}

            {tradingPhases[currentPhase]?.id === 'profit_commission' && (
              <div className="bg-black/20 rounded-lg p-4 mt-4 relative z-10">
                <div className="text-center mb-3">
                  <div className="text-green-400 font-bold text-lg mb-2">
                    💰 {currentLanguage === 'pt' ? 'RESULTADO DA OPERAÇÃO' : 'OPERATION RESULT'}
                  </div>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                  <div className="text-center">
                    <div className="text-blue-400 font-semibold">
                      {currentLanguage === 'pt' ? 'Lucro Bruto' : 'Gross Profit'}
                    </div>
                    <div className="text-green-400 font-bold text-lg">$156.70</div>
                  </div>
                  <div className="text-center">
                    <div className="text-orange-400 font-semibold">
                      {currentLanguage === 'pt' ? 'Comissão (30%)' : 'Commission (30%)'}
                    </div>
                    <div className="text-orange-400 font-bold text-lg">$47.01</div>
                  </div>
                  <div className="text-center">
                    <div className="text-emerald-400 font-semibold">
                      {currentLanguage === 'pt' ? 'SEU LUCRO' : 'YOUR PROFIT'}
                    </div>
                    <div className="text-emerald-400 font-bold text-xl">$109.69</div>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Estatísticas de Performance */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="bg-green-500/10 rounded-lg p-3 border border-green-500/20 text-center">
              <div className="text-green-400 text-sm font-semibold">
                {currentLanguage === 'pt' ? 'Taxa de Sucesso' : 'Success Rate'}
              </div>
              <motion.div 
                key={dailyStats.successRate}
                initial={{ scale: 1.1, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                className="text-green-400 text-xl font-bold"
              >
                {dailyStats.successRate.toFixed(1)}%
              </motion.div>
            </div>
            <div className="bg-blue-500/10 rounded-lg p-3 border border-blue-500/20 text-center">
              <div className="text-blue-400 text-sm font-semibold">
                {currentLanguage === 'pt' ? 'Retorno Hoje' : 'Today Return'}
              </div>
              <motion.div 
                key={dailyStats.todayReturnUSD}
                initial={{ scale: 1.1, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                className="text-blue-400 text-xl font-bold"
              >
                ${dailyStats.todayReturnUSD.toFixed(0)}
              </motion.div>
            </div>
            <div className="bg-purple-500/10 rounded-lg p-3 border border-purple-500/20 text-center">
              <div className="text-purple-400 text-sm font-semibold">
                {currentLanguage === 'pt' ? 'Operações Hoje' : 'Operations Today'}
              </div>
              <motion.div 
                key={dailyStats.operationsToday}
                initial={{ scale: 1.1, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                className="text-purple-400 text-xl font-bold"
              >
                {dailyStats.operationsToday}
              </motion.div>
            </div>
            <div className="bg-yellow-500/10 rounded-lg p-3 border border-yellow-500/20 text-center">
              <div className="text-yellow-400 text-sm font-semibold">
                {currentLanguage === 'pt' ? '% Retorno' : '% Return'}
              </div>
              <motion.div 
                key={dailyStats.todayReturnPercent}
                initial={{ scale: 1.1, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                className="text-yellow-400 text-xl font-bold"
              >
                {formatPercent(dailyStats.todayReturnPercent)}
              </motion.div>
            </div>
          </div>
        </div>

        {/* Disclaimer */}
        <div className="mt-6 text-center text-xs text-slate-500">
          {currentLanguage === 'pt' 
            ? '* Demonstração baseada em fluxo real do sistema. Performance passada não garante resultados futuros.' 
            : '* Demo based on real system flow. Past performance does not guarantee future results.'
          }
        </div>
      </div>
    );

        {/* Footer - Indicadores de Performance */}
        <div className="mt-6 grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
          <div className="bg-green-500/10 rounded-lg p-3 border border-green-500/20">
            <div className="text-green-400 text-sm font-semibold">
              {currentLanguage === 'pt' ? 'Taxa de Sucesso' : 'Success Rate'}
            </div>
            <div className="text-green-400 text-xl font-bold">94.7%</div>
          </div>
          <div className="bg-blue-500/10 rounded-lg p-3 border border-blue-500/20">
            <div className="text-blue-400 text-sm font-semibold">
              {currentLanguage === 'pt' ? 'Lucro Médio' : 'Avg Profit'}
            </div>
            <div className="text-blue-400 text-xl font-bold">$67.30</div>
          </div>
          <div className="bg-purple-500/10 rounded-lg p-3 border border-purple-500/20">
            <div className="text-purple-400 text-sm font-semibold">
              {currentLanguage === 'pt' ? 'Operações/Dia' : 'Trades/Day'}
            </div>
            <div className="text-purple-400 text-xl font-bold">12-18</div>
          </div>
          <div className="bg-yellow-500/10 rounded-lg p-3 border border-yellow-500/20">
            <div className="text-yellow-400 text-sm font-semibold">
              {currentLanguage === 'pt' ? 'Uptime' : 'Uptime'}
            </div>
            <div className="text-yellow-400 text-xl font-bold">99.9%</div>
          </div>
        </div>

        {/* Call to Action - Nova seção explicativa */}
        <div className="mt-6 bg-gradient-to-r from-yellow-500/20 to-orange-500/20 rounded-xl p-6 border border-yellow-500/30">
          <div className="text-center mb-4">
            <h4 className="text-yellow-400 font-bold text-lg mb-2">
              💡 {currentLanguage === 'pt' 
                ? 'Como você REALMENTE ganharia dinheiro:' 
                : 'How you would REALLY make money:'
              }
            </h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-left">
              <div className="space-y-2">
                <div className="flex items-center space-x-2">
                  <span className="text-blue-400">🔍</span>
                  <span className="text-slate-300">
                    {currentLanguage === 'pt' 
                      ? 'IA analisa 1000+ indicadores do mercado 24/7' 
                      : 'AI analyzes 1000+ market indicators 24/7'
                    }
                  </span>
                </div>
                <div className="flex items-center space-x-2">
                  <span className="text-yellow-400">⚡</span>
                  <span className="text-slate-300">
                    {currentLanguage === 'pt' 
                      ? 'Detecta sinais com +85% de confiança' 
                      : 'Detects signals with +85% confidence'
                    }
                  </span>
                </div>
                <div className="flex items-center space-x-2">
                  <span className="text-green-400">📈</span>
                  <span className="text-slate-300">
                    {currentLanguage === 'pt' 
                      ? 'Executa compra/venda automaticamente na Bybit' 
                      : 'Executes buy/sell automatically on Bybit'
                    }
                  </span>
                </div>
                <div className="flex items-center space-x-2">
                  <span className="text-cyan-400">👁️</span>
                  <span className="text-slate-300">
                    {currentLanguage === 'pt' 
                      ? 'Monitora sua posição em tempo real' 
                      : 'Monitors your position in real-time'
                    }
                  </span>
                </div>
              </div>
              <div className="space-y-2">
                <div className="flex items-center space-x-2">
                  <span className="text-green-400">💰</span>
                  <span className="text-slate-300">
                    {currentLanguage === 'pt' 
                      ? 'Realiza lucro no momento ideal' 
                      : 'Takes profit at the optimal moment'
                    }
                  </span>
                </div>
                <div className="flex items-center space-x-2">
                  <span className="text-orange-400">💳</span>
                  <span className="text-slate-300">
                    {currentLanguage === 'pt' 
                      ? 'Cobramos apenas 30% do SEU lucro' 
                      : 'We charge only 30% of YOUR profit'
                    }
                  </span>
                </div>
                <div className="flex items-center space-x-2">
                  <span className="text-purple-400">🏦</span>
                  <span className="text-slate-300">
                    {currentLanguage === 'pt' 
                      ? '70% do lucro fica na SUA conta' 
                      : '70% of profit stays in YOUR account'
                    }
                  </span>
                </div>
                <div className="flex items-center space-x-2">
                  <span className="text-blue-400">🔄</span>
                  <span className="text-slate-300">
                    {currentLanguage === 'pt' 
                      ? 'Processo se repete 8-12x por dia' 
                      : 'Process repeats 8-12x per day'
                    }
                  </span>
                </div>
              </div>
            </div>
          </div>
          
          <div className="bg-slate-900/50 rounded-lg p-4 mt-4">
            <div className="text-center">
              <p className="text-green-400 font-bold text-lg mb-2">
                💡 {currentLanguage === 'pt' 
                  ? 'EXEMPLO REAL: Com $10.000 investidos' 
                  : 'REAL EXAMPLE: With $10,000 invested'
                }
              </p>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                <div className="text-center">
                  <div className="text-blue-400 font-bold">8-12 {currentLanguage === 'pt' ? 'operações/dia' : 'operations/day'}</div>
                  <div className="text-slate-400">{currentLanguage === 'pt' ? 'Frequência' : 'Frequency'}</div>
                </div>
                <div className="text-center">
                  <div className="text-green-400 font-bold">$40-80 {currentLanguage === 'pt' ? 'seu lucro/dia' : 'your profit/day'}</div>
                  <div className="text-slate-400">{currentLanguage === 'pt' ? 'Ganho líquido' : 'Net gain'}</div>
                </div>
                <div className="text-center">
                  <div className="text-yellow-400 font-bold">$1.200-2.400/mês</div>
                  <div className="text-slate-400">{currentLanguage === 'pt' ? 'Potencial mensal' : 'Monthly potential'}</div>
                </div>
              </div>
            </div>
          </div>

          <div className="text-center mt-4">
            <p className="text-white font-semibold">
              🚀 {currentLanguage === 'pt' 
                ? 'Conecte sua conta Bybit e comece a lucrar HOJE!' 
                : 'Connect your Bybit account and start profiting TODAY!'
              }
            </p>
          </div>
        </div>

        {/* Disclaimer */}
        <div className="mt-4 text-center text-xs text-slate-500">
          {currentLanguage === 'pt' 
            ? '* Demonstração baseada em operações reais. Resultados passados não garantem resultados futuros. Trading envolve riscos.' 
            : '* Demo based on real operations. Past results do not guarantee future results. Trading involves risks.'
          }
        </div>
      </div>
    );
  };

  if (!mounted) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full flex items-center justify-center mx-auto mb-4 animate-spin">
            <span className="text-black font-bold text-xl">₿</span>
          </div>
          <p className="text-gray-400">
            {currentLanguage === 'pt' ? 'Carregando...' : 'Loading...'}
          </p>
        </div>
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>
          {currentLanguage === 'pt' 
            ? 'CoinBitClub MarketBot - Trading Automatizado de Criptomoedas com IA' 
            : 'CoinBitClub MarketBot - AI-Powered Automated Cryptocurrency Trading'
          }
        </title>
        <meta 
          name="description" 
          content={currentLanguage === 'pt' 
            ? "Plataforma de trading automatizado de criptomoedas com IA. Ganhe dinheiro no piloto automático 24/7. Comissão apenas sobre lucros reais." 
            : "AI-powered automated cryptocurrency trading platform. Make money on autopilot 24/7. Commission only on real profits."
          } 
        />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="robots" content="index, follow" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 text-white overflow-x-hidden">
        {/* Header */}
        <header className="fixed top-0 w-full bg-slate-900/95 backdrop-blur-md z-50 border-b border-slate-700/30">
          <div className="container mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex items-center justify-between h-16">
              {/* Logo */}
              <motion.div 
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                className="flex items-center space-x-3 cursor-pointer"
                onClick={() => router.push('/')}
              >
                <div className="w-8 h-8 sm:w-10 sm:h-10 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full flex items-center justify-center transform hover:scale-110 transition-transform">
                  <span className="text-black font-bold text-lg sm:text-xl">₿</span>
                </div>
                <div className="hidden sm:block">
                  <h1 className="text-lg sm:text-xl font-bold bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent">
                    CoinBitClub
                  </h1>
                  <p className="text-xs text-gray-400">MarketBot</p>
                </div>
              </motion.div>

              {/* Navigation */}
              <nav className="hidden md:flex items-center space-x-6 lg:space-x-8">
                <button 
                  onClick={() => router.push('/terms')}
                  className="text-gray-300 hover:text-yellow-400 transition-colors text-sm lg:text-base"
                >
                  {currentLanguage === 'pt' ? 'Termos' : 'Terms'}
                </button>
                <button 
                  onClick={() => router.push('/pricing')}
                  className="text-gray-300 hover:text-yellow-400 transition-colors text-sm lg:text-base"
                >
                  {currentLanguage === 'pt' ? 'Planos' : 'Plans'}
                </button>
              </nav>

              {/* Auth & Language */}
              <div className="hidden md:flex items-center space-x-4">
                {/* Auth Buttons */}
                <div className="flex items-center space-x-2">
                  <button 
                    onClick={() => router.push('/auth/login')}
                    className="text-gray-300 hover:text-yellow-400 transition-colors text-sm lg:text-base"
                  >
                    Login
                  </button>
                  <button 
                    onClick={() => router.push('/auth/register')}
                    className="bg-yellow-500 hover:bg-yellow-600 text-black font-semibold px-4 py-2 rounded-lg transition-colors text-sm lg:text-base"
                  >
                    {currentLanguage === 'pt' ? 'Cadastro' : 'Sign Up'}
                  </button>
                </div>

                {/* Language Toggle */}
                <div className="flex bg-slate-800 rounded-lg p-1">
                  <button
                    onClick={() => handleLanguageChange('pt')}
                    className={`px-2 md:px-3 py-1 rounded text-xs md:text-sm transition-all font-medium ${
                      currentLanguage === 'pt' 
                        ? 'bg-yellow-500 text-black shadow-lg transform scale-105' 
                        : 'text-gray-400 hover:text-white hover:bg-slate-700'
                    }`}
                  >
                    PT 🇧🇷
                  </button>
                  <button
                    onClick={() => handleLanguageChange('en')}
                    className={`px-2 md:px-3 py-1 rounded text-xs md:text-sm transition-all font-medium ${
                      currentLanguage === 'en' 
                        ? 'bg-yellow-500 text-black shadow-lg transform scale-105' 
                        : 'text-gray-400 hover:text-white hover:bg-slate-700'
                    }`}
                  >
                    EN 🇺🇸
                  </button>
                </div>
              </div>

              {/* Mobile Menu Button & Language - Mobile Only */}
              <div className="md:hidden flex items-center space-x-3">
                {/* Language Toggle - Mobile */}
                <div className="flex bg-slate-800 rounded-lg p-1">
                  <button
                    onClick={() => handleLanguageChange('pt')}
                    className={`px-2 py-1 rounded text-xs transition-all font-medium ${
                      currentLanguage === 'pt' 
                        ? 'bg-yellow-500 text-black shadow-lg transform scale-105' 
                        : 'text-gray-400 hover:text-white hover:bg-slate-700'
                    }`}
                  >
                    PT
                  </button>
                  <button
                    onClick={() => handleLanguageChange('en')}
                    className={`px-2 py-1 rounded text-xs transition-all font-medium ${
                      currentLanguage === 'en' 
                        ? 'bg-yellow-500 text-black shadow-lg transform scale-105' 
                        : 'text-gray-400 hover:text-white hover:bg-slate-700'
                    }`}
                  >
                    EN
                  </button>
                </div>

                {/* Mobile Menu Button */}
                <button
                  onClick={() => setShowMobileMenu(!showMobileMenu)}
                  className="p-2 text-gray-300 hover:text-yellow-400 transition-colors"
                >
                  <div className="w-6 h-6 flex flex-col justify-center items-center">
                    <span className={`bg-current h-0.5 w-6 transition-all ${showMobileMenu ? 'rotate-45 translate-y-1' : 'mb-1'}`}></span>
                    <span className={`bg-current h-0.5 w-6 transition-all ${showMobileMenu ? 'opacity-0' : 'mb-1'}`}></span>
                    <span className={`bg-current h-0.5 w-6 transition-all ${showMobileMenu ? '-rotate-45 -translate-y-1' : ''}`}></span>
                  </div>
                </button>
              </div>
            </div>
          </div>

          {/* Language Change Indicator - aparece brevemente */}
          <AnimatePresence>
            <motion.div
              key={`lang-indicator-${currentLanguage}`}
              initial={{ opacity: 0, y: -10, scale: 0.8 }}
              animate={{ opacity: 1, y: 0, scale: 1 }}
              exit={{ opacity: 0, y: -10, scale: 0.8 }}
              transition={{ duration: 0.3 }}
              className="absolute top-full left-1/2 transform -translate-x-1/2 z-10 pointer-events-none"
            >
              <motion.div
                initial={{ opacity: 1 }}
                animate={{ opacity: 0 }}
                transition={{ delay: 2, duration: 0.5 }}
                className="bg-yellow-500 text-black px-3 py-1 rounded-b-lg text-xs font-medium shadow-lg"
              >
                {currentLanguage === 'pt' ? '🇧🇷 Português' : '🇺🇸 English'}
              </motion.div>
            </motion.div>
          </AnimatePresence>
        </header>

        {/* Mobile Menu */}
        <AnimatePresence>
          {showMobileMenu && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              className="md:hidden bg-slate-900/95 backdrop-blur-md border-b border-slate-700/30 fixed top-16 left-0 right-0 z-40"
            >
              <div className="container mx-auto px-4 py-4">
                <div className="flex flex-col space-y-4">
                  <button 
                    onClick={() => {
                      router.push('/terms');
                      setShowMobileMenu(false);
                    }}
                    className="text-left text-gray-300 hover:text-yellow-400 transition-colors py-2 border-b border-slate-700/50"
                  >
                    {currentLanguage === 'pt' ? 'Termos' : 'Terms'}
                  </button>
                  <button 
                    onClick={() => {
                      router.push('/pricing');
                      setShowMobileMenu(false);
                    }}
                    className="text-left text-gray-300 hover:text-yellow-400 transition-colors py-2 border-b border-slate-700/50"
                  >
                    {currentLanguage === 'pt' ? 'Planos' : 'Plans'}
                  </button>
                  <button 
                    onClick={() => {
                      router.push('/auth/login');
                      setShowMobileMenu(false);
                    }}
                    className="text-left text-gray-300 hover:text-yellow-400 transition-colors py-2 border-b border-slate-700/50"
                  >
                    Login
                  </button>
                  <button 
                    onClick={() => {
                      router.push('/auth/register');
                      setShowMobileMenu(false);
                    }}
                    className="bg-yellow-500 hover:bg-yellow-600 text-black font-semibold px-4 py-3 rounded-lg transition-colors text-center"
                  >
                    {currentLanguage === 'pt' ? 'Cadastro' : 'Sign Up'}
                  </button>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Hero Section */}
        <section className="pt-20 md:pt-24 pb-12 md:pb-16 px-4 sm:px-6 lg:px-8 relative overflow-hidden">
          {/* Background Effects */}
          <div className="absolute inset-0 bg-gradient-to-br from-yellow-500/10 via-transparent to-orange-500/10"></div>
          <div className="absolute left-1/4 top-1/4 w-64 h-64 md:w-96 md:h-96 bg-yellow-500/20 rounded-full blur-3xl animate-pulse"></div>
          <div className="absolute right-1/4 bottom-1/4 w-64 h-64 md:w-96 md:h-96 bg-orange-500/20 rounded-full blur-3xl animate-pulse delay-1000"></div>

          <div className="container mx-auto text-center relative z-10">
            <div className="max-w-5xl mx-auto">
              <AnimatePresence mode="wait">
                <motion.h1
                  key={`hero-${currentLanguage}`}
                  initial={{ opacity: 0, y: 30 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -30 }}
                  transition={{ duration: 0.3 }}
                  className="text-3xl sm:text-4xl md:text-5xl lg:text-7xl font-bold mb-4 md:mb-6 leading-tight"
                >
                  <span className="bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent">
                    {t.title}
                  </span>
                  <br />
                  <span className="text-white text-2xl sm:text-3xl md:text-4xl lg:text-5xl">
                    {t.subtitle}
                  </span>
                  <br />
                  <span className="bg-gradient-to-r from-pink-400 to-purple-500 bg-clip-text text-transparent text-2xl sm:text-3xl md:text-4xl lg:text-5xl">
                    {t.highlight}
                  </span>
                </motion.h1>
              </AnimatePresence>
              
              <AnimatePresence mode="wait">
                <motion.p
                  key={`desc-${currentLanguage}`}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  transition={{ delay: 0.1, duration: 0.3 }}
                  className="text-lg md:text-xl lg:text-2xl text-slate-300 mb-6 md:mb-8 leading-relaxed px-4"
                >
                  {t.description}
                </motion.p>
              </AnimatePresence>

              <AnimatePresence mode="wait">
                <motion.div
                  key={`buttons-${currentLanguage}`}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  transition={{ delay: 0.2, duration: 0.3 }}
                  className="flex justify-center items-center mb-8 md:mb-12"
                >
                  <button 
                    onClick={() => router.push('/auth/register')}
                    className="bg-gradient-to-r from-yellow-400 to-orange-500 hover:from-yellow-500 hover:to-orange-600 text-black font-bold px-8 md:px-12 py-4 md:py-5 rounded-xl text-lg md:text-xl transition-all transform hover:scale-105 shadow-2xl"
                  >
                    {t.freeTrialBtn}
                  </button>
                </motion.div>
              </AnimatePresence>

              {/* Stats */}
              <motion.div
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.9 }}
                className="grid grid-cols-2 md:grid-cols-4 gap-4 md:gap-8 mb-12 md:mb-16"
              >
                <div className="text-center">
                  <div className="text-2xl md:text-3xl font-bold text-yellow-400 mb-2">
                    {operationStats.totalTrades.toLocaleString()}
                  </div>
                  <div className="text-gray-400 text-sm md:text-base">{t.stats.trades}</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl md:text-3xl font-bold text-green-400 mb-2">{operationStats.successRate}%</div>
                  <div className="text-gray-400 text-sm md:text-base">{t.stats.successRate}</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl md:text-3xl font-bold text-blue-400 mb-2">
                    ${operationStats.totalProfit.toLocaleString()}
                  </div>
                  <div className="text-gray-400 text-sm md:text-base">{t.stats.totalProfit}</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl md:text-3xl font-bold text-purple-400 mb-2">
                    {operationStats.activeUsers.toLocaleString()}
                  </div>
                  <div className="text-gray-400 text-sm md:text-base">{t.stats.activeUsers}</div>
                </div>
              </motion.div>
            </div>
          </div>
        </section>

        {/* How It Works Section */}
        <section className="py-12 md:py-16 px-4 sm:px-6 lg:px-8 bg-gradient-to-br from-slate-900/50 to-slate-800/50">
          <div className="container mx-auto">
            <div className="text-center mb-8 md:mb-12">
              <AnimatePresence mode="wait">
                <motion.h2
                  key={`how-it-works-title-${currentLanguage}`}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  transition={{ duration: 0.3 }}
                  className="text-3xl md:text-4xl lg:text-5xl font-bold text-yellow-400 mb-4"
                >
                  {t.howItWorks.title}
                </motion.h2>
              </AnimatePresence>
              <AnimatePresence mode="wait">
                <motion.p
                  key={`how-it-works-subtitle-${currentLanguage}`}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  transition={{ delay: 0.1, duration: 0.3 }}
                  className="text-lg md:text-xl text-slate-300"
                >
                  {t.howItWorks.subtitle}
                </motion.p>
              </AnimatePresence>
            </div>

            <div className="max-w-4xl mx-auto">
              <motion.div
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.2 }}
                className="bg-slate-800/80 rounded-2xl p-6 md:p-8 border border-yellow-500/20 shadow-2xl"
              >
                <div className="aspect-video bg-black rounded-xl overflow-hidden mb-4">
                  <iframe
                    width="100%"
                    height="100%"
                    src="https://www.youtube.com/embed/0z1pTl8n4wY"
                    title="Como Funciona o MARKETBOT"
                    frameBorder="0"
                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                    allowFullScreen
                    className="w-full h-full"
                  ></iframe>
                </div>
                
                <div className="text-center">
                  <p className="text-slate-400 text-sm md:text-base mb-4">
                    {currentLanguage === 'pt' 
                      ? 'Assista e entenda como o MARKETBOT pode transformar sua forma de investir'
                      : 'Watch and understand how MARKETBOT can transform your way of investing'
                    }
                  </p>
                  
                  <div className="flex flex-wrap justify-center gap-4 text-sm">
                    <div className="flex items-center space-x-2 text-green-400">
                      <span>✅</span>
                      <span>{currentLanguage === 'pt' ? 'Configuração simples' : 'Simple setup'}</span>
                    </div>
                    <div className="flex items-center space-x-2 text-blue-400">
                      <span>⚡</span>
                      <span>{currentLanguage === 'pt' ? 'Resultados rápidos' : 'Fast results'}</span>
                    </div>
                    <div className="flex items-center space-x-2 text-yellow-400">
                      <span>🤖</span>
                      <span>{currentLanguage === 'pt' ? 'IA 24/7' : 'AI 24/7'}</span>
                    </div>
                  </div>
                </div>
              </motion.div>
            </div>
          </div>
        </section>

        {/* Demo Section */}
        <section id="demo" className="py-12 md:py-16 px-4 sm:px-6 lg:px-8 bg-slate-800/30">
          <div className="container mx-auto">
            <div className="text-center mb-8 md:mb-12">
              <AnimatePresence mode="wait">
                <motion.h2
                  key={`demo-title-${currentLanguage}`}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  transition={{ duration: 0.3 }}
                  className="text-3xl md:text-4xl lg:text-5xl font-bold text-yellow-400 mb-4"
                >
                  {t.demo.title}
                </motion.h2>
              </AnimatePresence>
              <AnimatePresence mode="wait">
                <motion.p
                  key={`demo-subtitle-${currentLanguage}`}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  transition={{ delay: 0.1, duration: 0.3 }}
                  className="text-lg md:text-xl text-slate-300 max-w-3xl mx-auto"
                >
                  {t.demo.subtitle}
                </motion.p>
              </AnimatePresence>
            </div>

            <div className="max-w-6xl mx-auto">
              <RobotDemoLanding currentLanguage={currentLanguage} />
            </div>
          </div>
        </section>

        {/* Affiliate Section */}
        <section className="py-12 md:py-16 px-4 sm:px-6 lg:px-8 bg-gradient-to-br from-slate-800/50 to-slate-900/50">
          <div className="container mx-auto">
            <div className="text-center mb-12 md:mb-16">
              <AnimatePresence mode="wait">
                <motion.h2
                  key={`affiliate-title-${currentLanguage}`}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  transition={{ duration: 0.3 }}
                  className="text-3xl md:text-4xl lg:text-5xl font-bold text-yellow-400 mb-4"
                >
                  {t.affiliate.title}
                </motion.h2>
              </AnimatePresence>
              <AnimatePresence mode="wait">
                <motion.p
                  key={`affiliate-subtitle-${currentLanguage}`}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  transition={{ delay: 0.1, duration: 0.3 }}
                  className="text-lg md:text-xl text-slate-300 mb-6"
                >
                  {t.affiliate.subtitle}
                </motion.p>
              </AnimatePresence>
              <AnimatePresence mode="wait">
                <motion.p
                  key={`affiliate-desc-${currentLanguage}`}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  transition={{ delay: 0.2, duration: 0.3 }}
                  className="text-base md:text-lg text-slate-400 max-w-3xl mx-auto"
                >
                  {t.affiliate.description}
                </motion.p>
              </AnimatePresence>
            </div>

            <div className="max-w-4xl mx-auto">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6 md:gap-8 mb-8">
                <motion.div
                  initial={{ opacity: 0, y: 30 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.3 }}
                  className="bg-gradient-to-br from-yellow-500/20 to-orange-500/20 rounded-2xl p-6 text-center border border-yellow-500/30"
                >
                  <div className="text-4xl mb-4">�</div>
                  <h3 className="text-xl font-bold text-yellow-400 mb-2">
                    {t.affiliate.commission}
                  </h3>
                  <p className="text-slate-300 text-sm">
                    {currentLanguage === 'pt' 
                      ? 'Sobre os lucros reais dos seus indicados' 
                      : 'On real profits from your referrals'
                    }
                  </p>
                </motion.div>

                <motion.div
                  initial={{ opacity: 0, y: 30 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.4 }}
                  className="bg-gradient-to-br from-green-500/20 to-emerald-500/20 rounded-2xl p-6 text-center border border-green-500/30"
                >
                  <div className="text-4xl mb-4">⚡</div>
                  <h3 className="text-xl font-bold text-green-400 mb-2">
                    {t.affiliate.realtime}
                  </h3>
                  <p className="text-slate-300 text-sm">
                    {currentLanguage === 'pt' 
                      ? 'Receba suas comissões instantaneamente' 
                      : 'Receive your commissions instantly'
                    }
                  </p>
                </motion.div>

                <motion.div
                  initial={{ opacity: 0, y: 30 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.5 }}
                  className="bg-gradient-to-br from-blue-500/20 to-purple-500/20 rounded-2xl p-6 text-center border border-blue-500/30"
                >
                  <div className="text-4xl mb-4">�</div>
                  <h3 className="text-xl font-bold text-blue-400 mb-2">
                    {t.affiliate.dashboard}
                  </h3>
                  <p className="text-slate-300 text-sm">
                    {currentLanguage === 'pt' 
                      ? 'Acompanhe todas suas indicações e ganhos' 
                      : 'Track all your referrals and earnings'
                    }
                  </p>
                </motion.div>
              </div>

              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.6 }}
                className="text-center"
              >
                <button
                  onClick={() => router.push('/auth/affiliate-register')}
                  className="bg-gradient-to-r from-yellow-400 to-orange-500 hover:from-yellow-500 hover:to-orange-600 text-black font-bold px-8 py-4 rounded-xl text-lg transition-all transform hover:scale-105 shadow-2xl"
                >
                  {t.affiliate.cta}
                </button>
              </motion.div>
            </div>
          </div>
        </section>

        {/* Footer */}
        <footer className="bg-black py-8 md:py-12">
          <div className="container mx-auto px-4">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 md:gap-8">
              {/* Logo e Descrição */}
              <div className="md:col-span-2">
                <div className="flex items-center space-x-3 mb-4">
                  <div className="w-10 h-10 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full flex items-center justify-center">
                    <span className="text-black font-bold text-lg">₿</span>
                  </div>
                  <div>
                    <div className="text-yellow-400 font-bold text-xl">CoinBitClub</div>
                    <div className="text-yellow-400 text-sm">MARKETBOT</div>
                  </div>
                </div>
                <p className="text-slate-400 text-sm leading-relaxed mb-4">
                  {t.footer.description}
                </p>
              </div>

              {/* Contato */}
              <div>
                <h4 className="text-white font-semibold mb-4">
                  {t.footer.contact}
                </h4>
                <div className="space-y-2 text-sm">
                  <div className="text-slate-400">
                    <strong className="text-green-400">WhatsApp</strong><br />
                    +55 21 99596-6652
                  </div>
                  <div className="text-slate-400">
                    <strong className="text-blue-400">Email</strong><br />
                    faleconosco@coinbitclub.vip
                  </div>
                  <div className="text-slate-400">
                    <strong className="text-purple-400">
                      {t.footer.hours}
                    </strong><br />
                    {t.footer.support}
                  </div>
                </div>
              </div>
            </div>

            <div className="border-t border-slate-800 mt-6 md:mt-8 pt-6 md:pt-8 text-center">
              <p className="text-slate-500 text-sm">
                © 2025 CoinBitClub. {t.footer.rights}
              </p>
              <div className="mt-2 flex justify-center items-center space-x-4 md:space-x-6 text-xs text-slate-600">
                <span>🔒 {t.footer.secure}</span>
                <span>🛡️ {t.footer.protected}</span>
                <span>✅ {t.footer.audited}</span>
              </div>
            </div>
          </div>
        </footer>

        {/* FAQ Modal */}
        <AnimatePresence>
          {showFAQ && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4"
              onClick={() => setShowFAQ(false)}
            >
              <motion.div
                initial={{ scale: 0.9, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                exit={{ scale: 0.9, opacity: 0 }}
                className="bg-slate-800 rounded-2xl p-6 max-w-2xl w-full max-h-[80vh] overflow-y-auto"
                onClick={(e) => e.stopPropagation()}
              >
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-2xl font-bold text-white">
                    {t.faq.title}
                  </h3>
                  <button
                    onClick={() => setShowFAQ(false)}
                    className="text-slate-400 hover:text-white transition-colors"
                  >
                    ✕
                  </button>
                </div>

                <div className="space-y-4">
                  {t.faq.questions.map((faq, index) => (
                    <div key={index} className="border border-slate-700 rounded-lg">
                      <button
                        onClick={() => setOpenFAQ(openFAQ === index ? null : index)}
                        className="w-full px-4 py-3 text-left flex items-center justify-between hover:bg-slate-700/50 transition-colors"
                      >
                        <span className="text-white font-medium">{faq.q}</span>
                        <span className={`text-slate-400 transition-transform ${
                          openFAQ === index ? 'rotate-180' : ''
                        }`}>
                          ▼
                        </span>
                      </button>
                      <AnimatePresence>
                        {openFAQ === index && (
                          <motion.div
                            initial={{ height: 0, opacity: 0 }}
                            animate={{ height: "auto", opacity: 1 }}
                            exit={{ height: 0, opacity: 0 }}
                            className="overflow-hidden"
                          >
                            <div className="px-4 pb-3 text-slate-300">
                              {faq.a}
                            </div>
                          </motion.div>
                        )}
                      </AnimatePresence>
                    </div>
                  ))}
                </div>
              </motion.div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Video Modal */}
        <AnimatePresence>
          {showVideoModal && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="fixed inset-0 bg-black/90 backdrop-blur-sm z-50 flex items-center justify-center p-4"
              onClick={() => setShowVideoModal(false)}
            >
              <motion.div
                initial={{ scale: 0.9, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                exit={{ scale: 0.9, opacity: 0 }}
                className="bg-slate-800 rounded-2xl p-6 max-w-4xl w-full"
                onClick={(e) => e.stopPropagation()}
              >
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-2xl font-bold text-white">
                    {currentLanguage === 'pt' ? 'Demonstração do Sistema' : 'System Demonstration'}
                  </h3>
                  <button
                    onClick={() => setShowVideoModal(false)}
                    className="text-slate-400 hover:text-white transition-colors"
                  >
                    ✕
                  </button>
                </div>

                <div className="aspect-video bg-slate-900 rounded-lg flex items-center justify-center">
                  <div className="text-center">
                    <div className="text-6xl mb-4">🎥</div>
                    <h4 className="text-xl text-white mb-2">
                      {currentLanguage === 'pt' ? 'Vídeo de Demonstração' : 'Demo Video'}
                    </h4>
                    <p className="text-slate-400 mb-4">
                      {currentLanguage === 'pt' 
                        ? 'Veja como o robô funciona na prática'
                        : 'See how the robot works in practice'
                      }
                    </p>
                    <button
                      onClick={() => window.open('https://www.youtube.com/watch?v=PLACEHOLDER', '_blank')}
                      className="bg-red-600 hover:bg-red-700 text-white px-6 py-3 rounded-lg transition-colors"
                    >
                      ▶️ {currentLanguage === 'pt' ? 'Assistir no YouTube' : 'Watch on YouTube'}
                    </button>
                  </div>
                </div>
              </motion.div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* How It Works Modal */}
        <AnimatePresence>
          {showHowItWorksModal && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="fixed inset-0 bg-black/90 backdrop-blur-sm z-50 flex items-center justify-center p-4"
              onClick={() => setShowHowItWorksModal(false)}
            >
              <motion.div
                initial={{ scale: 0.9, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                exit={{ scale: 0.9, opacity: 0 }}
                className="bg-slate-800 rounded-2xl p-6 max-w-4xl w-full"
                onClick={(e) => e.stopPropagation()}
              >
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-2xl font-bold text-white">
                    {t.howItWorks.title}
                  </h3>
                  <button
                    onClick={() => setShowHowItWorksModal(false)}
                    className="text-slate-400 hover:text-white transition-colors"
                  >
                    ✕
                  </button>
                </div>

                <div className="aspect-video bg-slate-900 rounded-lg overflow-hidden">
                  <iframe
                    width="100%"
                    height="100%"
                    src="https://www.youtube.com/embed/0z1pTl8n4wY"
                    title="Como Funciona o MARKETBOT"
                    frameBorder="0"
                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                    allowFullScreen
                    className="w-full h-full"
                  ></iframe>
                </div>

                <div className="mt-4 text-center">
                  <p className="text-slate-400 text-sm">
                    {t.howItWorks.subtitle}
                  </p>
                </div>
              </motion.div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Floating Action Buttons */}
        <div className="fixed bottom-4 md:bottom-6 right-4 md:right-6 flex flex-col space-y-3 z-40">
          <button
            onClick={() => setShowFAQ(true)}
            className="w-12 h-12 md:w-14 md:h-14 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-full flex items-center justify-center shadow-lg hover:shadow-xl transition-all hover:scale-110"
          >
            <span className="text-white text-lg md:text-xl">❓</span>
          </button>
          <a
            href="https://wa.me/5521999596652"
            target="_blank"
            rel="noopener noreferrer"
            className="w-12 h-12 md:w-14 md:h-14 bg-green-500 hover:bg-green-600 rounded-full flex items-center justify-center shadow-lg hover:shadow-xl transition-all hover:scale-110"
          >
            <span className="text-white text-lg md:text-xl">💬</span>
          </a>
        </div>
      </div>
    </>
  );
}
