import { type ClassValue, clsx } from 'clsx';'
import { twMerge } from 'tailwind-merge';'

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

export function formatCurrency(
  value: number,
  currency: string = 'USD','
  locale: string = 'en-US''
): string {
  return new Intl.NumberFormat(locale, {
    style: 'currency','
    currency,
    minimumFractionDigits: 2,
    maximumFractionDigits: 8,
  }).format(value);
}

export function formatPercentage(
  value: number,
  decimals: number = 2
): string {
  return `${value >= 0 ? '+' : ''}${value.toFixed(decimals)}%`;'
}

export function formatNumber(
  value: number,
  decimals: number = 2,
  locale: string = 'en-US''
): string {
  return new Intl.NumberFormat(locale, {
    minimumFractionDigits: decimals,
    maximumFractionDigits: decimals,
  }).format(value);
}

export function formatDate(
  date: string | Date,
  format: 'short' | 'medium' | 'long' | 'full' = 'medium','
  locale: string = 'en-US''
): string {
  const dateObj = typeof date === 'string' ? new Date(date) : date;'
    const formats: Record<string, Intl.DateTimeFormatOptions> = {
    short: { 
      year: '2-digit', '
      month: 'short', '
      day: 'numeric' '
    },
    medium: { 
      year: 'numeric', '
      month: 'short', '
      day: 'numeric', '
      hour: '2-digit', '
      minute: '2-digit' '
    },
    long: { 
      year: 'numeric', '
      month: 'long', '
      day: 'numeric', '
      hour: '2-digit', '
      minute: '2-digit', '
      second: '2-digit' '
    },
    full: { 
      weekday: 'long', '
      year: 'numeric', '
      month: 'long', '
      day: 'numeric', '
      hour: '2-digit', '
      minute: '2-digit', '
      second: '2-digit' '
    }
  };

  return new Intl.DateTimeFormat(locale, formats[format]).format(dateObj);
}

export function formatDuration(seconds: number): string {
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const remainingSeconds = seconds % 60;
  
  if (hours > 0) {
    return `${hours}h ${minutes}m`;
  }
  if (minutes > 0) {
    return `${minutes}m ${remainingSeconds}s`;
  }
  return `${remainingSeconds}s`;
}

export function getPnlColor(value: number): string {
  if (value > 0) return 'text-success';'
  if (value < 0) return 'text-destructive';'
  return 'text-muted-foreground';'
}

export function getStatusColor(status: string): string {
  const statusMap: Record<string, string> = {
    active: 'text-success','
    inactive: 'text-muted-foreground','
    error: 'text-destructive','
    pending: 'text-warning','
    filled: 'text-success','
    cancelled: 'text-muted-foreground','
    rejected: 'text-destructive','
  };
  
  return statusMap[status.toLowerCase()] || 'text-muted-foreground';'
}

export function getStatusBadgeClass(status: string): string {
  const statusMap: Record<string, string> = {
    active: 'status-active','
    inactive: 'status-inactive','
    error: 'status-error','
    pending: 'status-pending','
    filled: 'status-active','
    cancelled: 'status-inactive','
    rejected: 'status-error','
  };
  
  return statusMap[status.toLowerCase()] || 'status-inactive';'
}

export function copyToClipboard(text: string): Promise<void> {
  return navigator.clipboard.writeText(text);
}

export function downloadCsv(data: any[], filename: string): void {
  if (!data.length) return;
  
  const headers = Object.keys(data[0]);
  const csvContent = [
    headers.join(','),'
    ...data.map(row => 
      headers.map(header => {
        const value = row[header];
        if (typeof value === 'string' && value.includes(',')) {'
          return `"${value}"`;"
        }
        return value;
      }).join(',')'
    )
  ].join('\n');'
  
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });'
  const link = document.createElement('a');'
  
  if (link.download !== undefined) {
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);'
    link.setAttribute('download', `${filename}.csv`);'
    link.style.visibility = 'hidden';'
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }
}

export function downloadJson(data: any, filename: string): void {
  const jsonContent = JSON.stringify(data, null, 2);
  const blob = new Blob([jsonContent], { type: 'application/json;charset=utf-8;' });'
  const link = document.createElement('a');'
  
  if (link.download !== undefined) {
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);'
    link.setAttribute('download', `${filename}.json`);'
    link.style.visibility = 'hidden';'
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }
}

export function debounce<T extends (...args: any[]) => any>(
  func: T,
  wait: number
): (...args: Parameters<T>) => void {
  let timeout: NodeJS.Timeout;
  
  return (...args: Parameters<T>) => {
    clearTimeout(timeout);
    timeout = setTimeout(() => func(...args), wait);
  };
}

export function throttle<T extends (...args: any[]) => any>(
  func: T,
  limit: number
): (...args: Parameters<T>) => void {
  let inThrottle: boolean;
  
  return (...args: Parameters<T>) => {
    if (!inThrottle) {
      func(...args);
      inThrottle = true;
      setTimeout(() => inThrottle = false, limit);
    }
  };
}

export function generateQRCode(text: string): string {
  // Simplified QR code generation - in production, use a proper QR library
  return `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(text)}`;
}

export function validateEmail(email: string): boolean {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}

export function validatePassword(password: string): {
  isValid: boolean;
  errors: string[];
} {
  const errors: string[] = [];
  
  if (password.length < 8) {
    errors.push('Password must be at least 8 characters long');'
  }
  
  if (!/[A-Z]/.test(password)) {
    errors.push('Password must contain at least one uppercase letter');'
  }
  
  if (!/[a-z]/.test(password)) {
    errors.push('Password must contain at least one lowercase letter');'
  }
  
  if (!/\d/.test(password)) {
    errors.push('Password must contain at least one number');'
  }
  
  if (!/[!@#$%^&*(),.?":{}|<>]/.test(password)) {"
    errors.push('Password must contain at least one special character');'
  }
  
  return {
    isValid: errors.length === 0,
    errors,
  };
}

export function truncateString(str: string, length: number): string {
  if (str.length <= length) return str;
  return str.substring(0, length) + '...';'
}

export function generateRandomId(): string {
  return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
}
