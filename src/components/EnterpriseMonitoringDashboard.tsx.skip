'use client';

import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { usePerformanceMonitor } from '@/lib/performance-monitor';
import { useWebSocket } from '@/lib/websocket-manager';
import { useCache, CacheManager } from '@/lib/cache-manager';

interface SystemHealth {
  status: 'healthy' | 'warning' | 'critical';
  uptime: number;
  activeUsers: number;
  responseTime: number;
  errorRate: number;
  memoryUsage: number;
  cacheHitRate: number;
}

export const EnterpriseMonitoringDashboard: React.FC = () => {
  const { metrics, alerts } = usePerformanceMonitor();
  const [systemHealth, setSystemHealth] = useState<SystemHealth>({
    status: 'healthy',
    uptime: 0,
    activeUsers: 0,
    responseTime: 0,
    errorRate: 0,
    memoryUsage: 0,
    cacheHitRate: 0
  });

  const [isExpanded, setIsExpanded] = useState(false);
  const [autoRefresh, setAutoRefresh] = useState(true);

  // WebSocket for real-time updates
  const { isConnected, stats: wsStats } = useWebSocket('monitoring', {
    url: 'wss://api.coinbitclub.com/monitoring'
  });

  // Cache statistics
  const { stats: cacheStats } = useCache('monitoring');

  useEffect(() => {
    // Update system health based on metrics
    const updateSystemHealth = () => {
      const avgResponseTime = metrics.apiResponseTime?.length 
        ? metrics.apiResponseTime.reduce((a, b) => a + b, 0) / metrics.apiResponseTime.length 
        : 0;

      const memoryMB = metrics.memoryUsage ? metrics.memoryUsage / 1024 / 1024 : 0;
      
      let status: 'healthy' | 'warning' | 'critical' = 'healthy';
      
      if (avgResponseTime > 1000 || memoryMB > 200 || (metrics.errorRate || 0) > 5) {
        status = 'warning';
      }
      
      if (avgResponseTime > 3000 || memoryMB > 400 || (metrics.errorRate || 0) > 10) {
        status = 'critical';
      }

      setSystemHealth({
        status,
        uptime: Date.now() - (performance.timeOrigin || 0),
        activeUsers: Math.floor(Math.random() * 1500) + 500, // Simulate active users
        responseTime: avgResponseTime,
        errorRate: metrics.errorRate || 0,
        memoryUsage: memoryMB,
        cacheHitRate: cacheStats.hitRate || 0
      });
    };

    updateSystemHealth();
    
    if (autoRefresh) {
      const interval = setInterval(updateSystemHealth, 5000);
      return () => clearInterval(interval);
    }
  }, [metrics, autoRefresh, cacheStats]);

  const formatUptime = (ms: number): string => {
    const seconds = Math.floor(ms / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);
    
    if (days > 0) return `${days}d ${hours % 24}h`;
    if (hours > 0) return `${hours}h ${minutes % 60}m`;
    return `${minutes}m ${seconds % 60}s`;
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'healthy': return 'text-green-600 bg-green-100 dark:bg-green-900 dark:text-green-200';
      case 'warning': return 'text-yellow-600 bg-yellow-100 dark:bg-yellow-900 dark:text-yellow-200';
      case 'critical': return 'text-red-600 bg-red-100 dark:bg-red-900 dark:text-red-200';
      default: return 'text-gray-600 bg-gray-100 dark:bg-gray-800 dark:text-gray-300';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'healthy': return '‚úÖ';
      case 'warning': return '‚ö†Ô∏è';
      case 'critical': return 'üö®';
      default: return '‚ö™';
    }
  };

  // Only show in development or when explicitly enabled
  const isDevelopment = process.env.NODE_ENV === 'development';
  const shouldShow = isDevelopment || (window as any).monitoringDashboardEnabled;

  if (!shouldShow) return null;

  return (
    <>
      {/* Floating Monitor Button */}
      <motion.button
        onClick={() => setIsExpanded(!isExpanded)}
        className="fixed bottom-20 right-4 z-50 bg-gray-800 hover:bg-gray-700 text-white p-3 rounded-full shadow-lg"
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
        title="System Monitoring"
      >
        üìä
      </motion.button>

      {/* Monitoring Dashboard */}
      {isExpanded && (
        <motion.div
          initial={{ opacity: 0, y: 400 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: 400 }}
          className="fixed bottom-20 right-4 w-96 bg-white dark:bg-gray-900 shadow-2xl rounded-lg border border-gray-200 dark:border-gray-700 z-40 max-h-96 overflow-y-auto"
        >
          {/* Header */}
          <div className="sticky top-0 bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700 p-4">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-bold text-gray-900 dark:text-white">
                Sistema Monitor
              </h3>
              <div className="flex gap-2">
                <button
                  onClick={() => setAutoRefresh(!autoRefresh)}
                  className={`px-2 py-1 rounded text-xs ${
                    autoRefresh 
                      ? 'bg-green-600 text-white' 
                      : 'bg-gray-200 text-gray-700 dark:bg-gray-700 dark:text-gray-300'
                  }`}
                >
                  Auto: {autoRefresh ? 'ON' : 'OFF'}
                </button>
                <button
                  onClick={() => setIsExpanded(false)}
                  className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
                >
                  ‚úï
                </button>
              </div>
            </div>
          </div>

          {/* System Health Overview */}
          <div className="p-4 space-y-4">
            {/* Status Card */}
            <div className="border border-gray-200 dark:border-gray-700 rounded p-3">
              <div className="flex items-center justify-between mb-2">
                <h4 className="font-semibold text-gray-900 dark:text-white">Status Geral</h4>
                <span className={`px-2 py-1 rounded text-xs flex items-center gap-1 ${getStatusColor(systemHealth.status)}`}>
                  {getStatusIcon(systemHealth.status)}
                  {systemHealth.status.toUpperCase()}
                </span>
              </div>
              
              <div className="grid grid-cols-2 gap-2 text-sm">
                <div>
                  <span className="text-gray-600 dark:text-gray-400">Uptime:</span>
                  <div className="font-mono">{formatUptime(systemHealth.uptime)}</div>
                </div>
                <div>
                  <span className="text-gray-600 dark:text-gray-400">Usu√°rios:</span>
                  <div className="font-mono">{systemHealth.activeUsers.toLocaleString()}</div>
                </div>
              </div>
            </div>

            {/* Performance Metrics */}
            <div className="border border-gray-200 dark:border-gray-700 rounded p-3">
              <h4 className="font-semibold text-gray-900 dark:text-white mb-2">Performance</h4>
              
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-600 dark:text-gray-400">Response Time:</span>
                  <span className={`font-mono ${
                    systemHealth.responseTime > 1000 ? 'text-red-600' : 
                    systemHealth.responseTime > 500 ? 'text-yellow-600' : 'text-green-600'
                  }`}>
                    {systemHealth.responseTime.toFixed(0)}ms
                  </span>
                </div>
                
                <div className="flex justify-between">
                  <span className="text-gray-600 dark:text-gray-400">Memory Usage:</span>
                  <span className={`font-mono ${
                    systemHealth.memoryUsage > 300 ? 'text-red-600' : 
                    systemHealth.memoryUsage > 200 ? 'text-yellow-600' : 'text-green-600'
                  }`}>
                    {systemHealth.memoryUsage.toFixed(1)}MB
                  </span>
                </div>
                
                <div className="flex justify-between">
                  <span className="text-gray-600 dark:text-gray-400">Error Rate:</span>
                  <span className={`font-mono ${
                    systemHealth.errorRate > 5 ? 'text-red-600' : 
                    systemHealth.errorRate > 2 ? 'text-yellow-600' : 'text-green-600'
                  }`}>
                    {systemHealth.errorRate.toFixed(2)}%
                  </span>
                </div>
                
                <div className="flex justify-between">
                  <span className="text-gray-600 dark:text-gray-400">Cache Hit Rate:</span>
                  <span className={`font-mono ${
                    systemHealth.cacheHitRate < 70 ? 'text-red-600' : 
                    systemHealth.cacheHitRate < 85 ? 'text-yellow-600' : 'text-green-600'
                  }`}>
                    {systemHealth.cacheHitRate.toFixed(1)}%
                  </span>
                </div>
              </div>
            </div>

            {/* Core Web Vitals */}
            {(metrics.lcp || metrics.fid || metrics.cls) && (
              <div className="border border-gray-200 dark:border-gray-700 rounded p-3">
                <h4 className="font-semibold text-gray-900 dark:text-white mb-2">Core Web Vitals</h4>
                
                <div className="space-y-2 text-sm">
                  {metrics.lcp && (
                    <div className="flex justify-between">
                      <span className="text-gray-600 dark:text-gray-400">LCP:</span>
                      <span className={`font-mono ${
                        metrics.lcp > 4000 ? 'text-red-600' : 
                        metrics.lcp > 2500 ? 'text-yellow-600' : 'text-green-600'
                      }`}>
                        {metrics.lcp.toFixed(0)}ms
                      </span>
                    </div>
                  )}
                  
                  {metrics.fid && (
                    <div className="flex justify-between">
                      <span className="text-gray-600 dark:text-gray-400">FID:</span>
                      <span className={`font-mono ${
                        metrics.fid > 300 ? 'text-red-600' : 
                        metrics.fid > 100 ? 'text-yellow-600' : 'text-green-600'
                      }`}>
                        {metrics.fid.toFixed(0)}ms
                      </span>
                    </div>
                  )}
                  
                  {metrics.cls && (
                    <div className="flex justify-between">
                      <span className="text-gray-600 dark:text-gray-400">CLS:</span>
                      <span className={`font-mono ${
                        metrics.cls > 0.25 ? 'text-red-600' : 
                        metrics.cls > 0.1 ? 'text-yellow-600' : 'text-green-600'
                      }`}>
                        {metrics.cls.toFixed(3)}
                      </span>
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* WebSocket Status */}
            <div className="border border-gray-200 dark:border-gray-700 rounded p-3">
              <h4 className="font-semibold text-gray-900 dark:text-white mb-2">WebSocket</h4>
              
              <div className="flex items-center justify-between text-sm">
                <span className="text-gray-600 dark:text-gray-400">Connection:</span>
                <span className={`px-2 py-1 rounded text-xs ${
                  isConnected 
                    ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' 
                    : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'
                }`}>
                  {isConnected ? 'Connected' : 'Disconnected'}
                </span>
              </div>
              
              {wsStats && (
                <div className="mt-2 space-y-1 text-xs">
                  <div className="flex justify-between">
                    <span className="text-gray-600 dark:text-gray-400">Messages:</span>
                    <span className="font-mono">‚Üë{wsStats.messagesSent} ‚Üì{wsStats.messagesReceived}</span>
                  </div>
                  {wsStats.latency > 0 && (
                    <div className="flex justify-between">
                      <span className="text-gray-600 dark:text-gray-400">Latency:</span>
                      <span className="font-mono">{wsStats.latency}ms</span>
                    </div>
                  )}
                </div>
              )}
            </div>

            {/* Recent Alerts */}
            {alerts.length > 0 && (
              <div className="border border-gray-200 dark:border-gray-700 rounded p-3">
                <h4 className="font-semibold text-gray-900 dark:text-white mb-2">Alertas Recentes</h4>
                
                <div className="space-y-2 max-h-32 overflow-y-auto">
                  {alerts.slice(-5).reverse().map((alert) => (
                    <div
                      key={alert.id}
                      className={`p-2 rounded text-xs ${
                        alert.type === 'critical' 
                          ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200' 
                          : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'
                      }`}
                    >
                      <div className="font-semibold">{alert.metric}</div>
                      <div>{alert.message}</div>
                      <div className="text-gray-500 dark:text-gray-400">
                        {new Date(alert.timestamp).toLocaleTimeString()}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Cache Statistics */}
            <div className="border border-gray-200 dark:border-gray-700 rounded p-3">
              <h4 className="font-semibold text-gray-900 dark:text-white mb-2">Cache Stats</h4>
              
              <div className="text-xs space-y-1">
                <div className="flex justify-between">
                  <span className="text-gray-600 dark:text-gray-400">Hits/Misses:</span>
                  <span className="font-mono">{cacheStats.hits}/{cacheStats.misses}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600 dark:text-gray-400">Size:</span>
                  <span className="font-mono">{cacheStats.size} items</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600 dark:text-gray-400">Evictions:</span>
                  <span className="font-mono">{cacheStats.evictions}</span>
                </div>
              </div>
            </div>
          </div>
        </motion.div>
      )}
    </>
  );
};
